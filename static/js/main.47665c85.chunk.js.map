{"version":3,"sources":["components/presentational/Grid/Grid.module.css","components/pages/HomePage/HomePage.module.css","components/presentational/Grid/Grid.tsx","components/pages/HomePage/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SearchOptions","Grid","size","searchOption","getPathLength","React","useState","selectedStart","setSelectedStart","selectedDestination","setSelectedDestination","isCurrentPosition","setIsCurrentPosition","grid","setGrid","blocked","setBlocked","columnStyle","styles","column","columnBlockedStyle","columnBlocked","columnPathStyle","columnPath","startStyle","start","destinationStyle","destination","getAdjacent","vertex","x","y","adjacentVals","top","right","bottom","left","arr","isBlocked","push","breadthFirstTraversal","path","visited","unprocessed","length","u","shift","toString","getClass","result","useEffect","tmpPath","BREADTH_FIRST_SEARCH","SHORTEST_PATH","key","shortestDistance","i","Object","keys","matrix","tmpGrid","row","j","onClick","handleSetSelectedPosition","onMouseOver","handleMouseOver","className","style","height","width","margin","createMatrix","position","event","metaKey","HomePage","setSearchOption","setSize","pathLength","setPathLength","handleInputChange","target","value","homePageLockup","infoLockup","searchOptions","id","type","name","checked","htmlFor","gridSize","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,IAAM,kBAAkB,OAAS,qBAAqB,cAAgB,+CAA+C,WAAa,4CAA4C,MAAQ,uCAAuC,YAAc,+C,gBCAvRD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,WAAa,6BAA6B,cAAgB,gCAAgC,SAAW,6B,8YCsBzK,ICnBYC,EDwMGC,EArLkC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAAoB,EAChDC,IAAMC,SAAmB,CAAC,EAAG,IADmB,mBACnFC,EADmF,KACpEC,EADoE,OAEpCH,IAAMC,SAAmB,CAAC,EAAG,IAFO,mBAEnFG,EAFmF,KAE9DC,EAF8D,OAGxCL,IAAMC,UAAS,GAHyB,mBAGnFK,EAHmF,KAGhEC,EAHgE,OAIlEP,IAAMC,SAAS,IAJmD,mBAInFO,EAJmF,KAI7EC,EAJ6E,OAK5DT,IAAMC,SAAkB,IALoC,mBAKnFS,EALmF,KAK1EC,EAL0E,KAQpFC,EAAcC,IAAOC,OACrBC,EAAqBF,IAAOG,cAC5BC,EAAkBJ,IAAOK,WACzBC,EAAaN,IAAOO,MACpBC,EAAmBR,IAAOS,YAE1BC,EAAc,SAACC,GACnB,IAAMC,EAAID,EAAO,GAAIE,EAAIF,EAAO,GAC1BG,EAAe,CACnBC,IAAK,CAACH,EAAGC,EAAI,GACbG,MAAO,CAACJ,EAAI,EAAGC,GACfI,OAAQ,CAACL,EAAGC,EAAI,GAChBK,KAAM,CAACN,EAAI,EAAGC,IAEVM,EAAM,GAaZ,OAZKC,EAAUN,EAAaC,MAAQD,EAAaC,IAAI,IAAM,GACzDI,EAAIE,KAAKP,EAAaC,MAEnBK,EAAUN,EAAaE,QAAUF,EAAaE,MAAM,IAAMhC,EAAO,GACpEmC,EAAIE,KAAKP,EAAaE,QAEnBI,EAAUN,EAAaG,SAAWH,EAAaG,OAAO,IAAMjC,EAAO,GACtEmC,EAAIE,KAAKP,EAAaG,SAEnBG,EAAUN,EAAaI,OAASJ,EAAaI,KAAK,IAAM,GACzDC,EAAIE,KAAKP,EAAaI,MAEnBC,GAGHG,EAAwB,SAACX,GAC7B,IAAMY,EAAmB,GACnBC,EAAoB,GACpBC,EAA0B,GAGhC,IADAA,EAAYJ,KAAKV,GACa,IAAvBc,EAAYC,QAAc,CAC/B,IAAIC,EAAcF,EAAYG,SAAW,GACzC,GAAID,EAAE,KAAOpC,EAAoB,IAAMoC,EAAE,KAAOpC,EAAoB,GAClE,MAEGiC,EAAQG,EAAEE,cACbN,EAAKF,KAAKM,GACVH,EAAQG,EAAEE,aAAc,EACxBJ,EAAYJ,KAAZ,MAAAI,EAAW,YAASf,EAAYiB,MAGpC,OAAOJ,GAiCLH,EAAY,SAACD,GACf,OAAOtB,EAAQsB,IAIbW,EAAW,SAACX,GAAqC,IAAtBY,EAAqB,uDAAP,GAC3C,OAAIX,EAAUD,GACLjB,EACEiB,EAAI,KAAO9B,EAAc,IAAM8B,EAAI,KAAO9B,EAAc,GAC1DiB,EACEa,EAAI,KAAO5B,EAAoB,IAAM4B,EAAI,KAAO5B,EAAoB,GACtEiB,EACEuB,EAAOZ,EAAIU,YACbzB,EAEAL,GAIXZ,IAAM6C,WAAU,WACd,IAAID,EAAc,GAClB,GAAI1C,EAAcqC,OAAS,EAAG,CAC5B,IAAIO,EAAiB,GACrB,OAAOhD,GACL,KAAKH,EAAcoD,qBAAsBD,EAAUX,EAAsBjC,GACvE,MACF,KAAKP,EAAcqD,cAAeF,EAxDf,SAACtB,GACxB,IACMa,EAAe,GACfC,EAAmC,GAOzC,IALAA,EAAYJ,KAAK,CACfe,IAAKzB,EACLY,KAAM,CAACZ,KAGqB,IAAvBc,EAAYC,QAAc,CAE/B,IAAIC,EAAuBF,EAAYG,QACvC,GAAID,EAAES,IAAI,KAAO7C,EAAoB,IAAMoC,EAAES,IAAI,KAAO7C,EAAoB,GAC1E,OAAOoC,EAAEJ,KAEX,IAAKC,EAAQG,EAAES,IAAIP,YAAa,CAC9BL,EAAQG,EAAES,IAAIP,aAAc,EADE,2BAE9B,YAAmBnB,EAAYiB,EAAES,KAAjC,+CAAuC,CAAC,IAA/BzB,EAA8B,QACrCc,EAAYJ,KAAK,CACfe,IAAKzB,EACLY,KAAK,GAAD,mBAAMI,EAAEJ,MAAR,CAAcZ,OALQ,oFAWlC,MA1BuB,GAuDyB0B,CAAiBhD,GAC3D,MACF,QAAS4C,EAAUX,EAAsBjC,GAPf,2BAU5B,IAAI,IAAJ,IAAa4C,EAAb,+CAAsB,CAAC,IAAfK,EAAc,QACpBP,EAAOO,IAAK,GAXc,kFAc5BpD,EAAcqD,OAAOC,KAAKT,GAAQL,QAIpC,IAqBIe,EArBiB,WAEnB,IADA,IAAIC,EAAe,GACVJ,EAAI,EAAGA,EAAItD,EAAMsD,IAAK,CAC7BI,EAAQrB,KAAK,IAEb,IADA,IAAMsB,EAAM,GACHC,EAAI,EAAGA,EAAI5D,EAAM4D,IACxBD,EAAItB,KACF,yBACEe,IAAG,UAAKE,EAAL,YAAUM,GACbC,QAASC,EAA0B,CAACR,EAAEM,IACtCG,YAAaC,EAAgB,CAACV,EAAEM,IAChCK,UAAWnB,EAAS,CAACQ,EAAGM,GAAIb,GAC5BmB,MAAO,CAAEC,OAAO,GAAD,OAAK,IAAInE,EAAT,MAAmBoE,MAAM,GAAD,OAAK,IAAIpE,EAAT,MAAmBqE,OAAQ,YAIxEX,EAAQJ,GAAGjB,KAAK,yBAAK4B,UAAWjD,IAAO2C,KAAMA,IAE/C,OAAOD,EAGIY,GACb1D,EAAQ6C,KACP,CAACzD,EAAMK,EAAeE,EAAqBM,IAE9C,IAAMmD,EAAkB,SAACO,GAAD,OAAmB,SAACC,GACtCA,EAAMC,SACR3D,E,yVAAW,CAAD,GACLD,EADK,eAEP0D,GAAY1D,EAAQ0D,QAMrBT,EAA4B,SAACS,GAAD,OAAwB,SAACC,GACpDpC,EAAUmC,KACT9D,GACFH,EAAiBiE,GACjB7D,GAAqB,KAErBF,EAAuB+D,GACvB7D,GAAqB,OAK3B,OACE,yBAAKuD,UAAWjD,IAAOL,MACnBA,I,0BCnMIb,K,2CAAAA,E,+BAAAA,M,KAMZ,IA8Ee4E,EA9E2B,WAAO,IAAD,EACNvE,IAAMC,SAASN,EAAcoD,sBADvB,mBACvCjD,EADuC,KACzB0E,EADyB,OAEtBxE,IAAMC,SAAS,IAFO,mBAEvCJ,EAFuC,KAEjC4E,EAFiC,OAGVzE,IAAMC,SAAS,GAHL,mBAGvCyE,EAHuC,KAG3BC,EAH2B,KASxCC,EAAoB,SAACP,GACzBG,EAAgBH,EAAMQ,OAAOC,QAY/B,OAJA9E,IAAM6C,WAAU,cAEb,CAAC6B,IAGF,yBAAKZ,UAAWjD,IAAOkE,gBACrB,yBAAKjB,UAAWjD,IAAOmE,YACrB,6CAAkB,gCAASlF,IAC3B,yBAAKgE,UAAWjD,IAAOoE,eACrB,2BACEC,GAAG,oBACHC,KAAK,QACLC,KAAK,eACLC,QAASvF,IAAiBH,EAAcoD,qBACxC+B,MAAOnF,EAAcoD,qBACrBW,QAASkB,IAEX,2BAAOU,QAAQ,qBAAqB3F,EAAcoD,uBAEpD,yBAAKe,UAAWjD,IAAOoE,eACrB,2BACEC,GAAG,eACHC,KAAK,QACLC,KAAK,eACLC,QAASvF,IAAiBH,EAAcqD,cACxC8B,MAAOnF,EAAcqD,cACrBU,QAASkB,IAEX,2BAAOU,QAAQ,gBAAgB3F,EAAcqD,gBAG/C,yBAAKc,UAAWjD,IAAO0E,UACrB,2BAAOD,QAAQ,YAAf,aACA,2BACEJ,GAAG,WACHC,KAAK,SACLC,KAAK,WACLN,MAAOjF,EACP2F,SA5CY,SAACnB,GACjBA,EAAMQ,OAAOC,OAAS,GAAKT,EAAMQ,OAAOC,OAAS,IACnDL,EAAQJ,EAAMQ,OAAOC,UA4Cf,oCAEE,6BAFF,YASJ,2CAAgB,gCAASJ,IACzB,6BACE,2BAAG,yCAAH,wGACA,2BAAG,0DAAH,yHAGJ,kBAAC,EAAD,CAAM7E,KAAMA,EAAMC,aAAcA,EAAcC,cApE5B,SAACwC,GACrBoC,EAAcpC,QCLHkD,EARO,WACpB,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCMc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47665c85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3MJdT\",\"row\":\"Grid_row__3YKx6\",\"column\":\"Grid_column__38RpR\",\"columnBlocked\":\"Grid_columnBlocked__3aRim Grid_column__38RpR\",\"columnPath\":\"Grid_columnPath__1i5qs Grid_column__38RpR\",\"start\":\"Grid_start__B1Zgu Grid_column__38RpR\",\"destination\":\"Grid_destination__3j914 Grid_column__38RpR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homePageLockup\":\"HomePage_homePageLockup__27l_8\",\"infoLockup\":\"HomePage_infoLockup__2oUko\",\"searchOptions\":\"HomePage_searchOptions__XJkLc\",\"gridSize\":\"HomePage_gridSize__NkJ-U\"};","import React from \"react\";\nimport styles from \"./Grid.module.css\";\nimport { SearchOptions } from \"../../pages/HomePage/HomePage\";\n\ntype GridProps = {\n  size: number;\n  searchOption: string;\n  getPathLength: Function;\n}\n\ninterface IVisited {\n  [key: string]: boolean;\n}\n\ninterface UnprocessedVertex {\n  key: number[];\n  path: number[][];\n}\n\ninterface Blocked {\n  [key: string]: number[];\n}\n\nconst Grid: React.FunctionComponent<GridProps> = ({ size, searchOption, getPathLength }) => {\n  const [selectedStart, setSelectedStart] = React.useState<number[]>([0, 0]);\n  const [selectedDestination, setSelectedDestination] = React.useState<number[]>([0, 0]);\n  const [isCurrentPosition, setIsCurrentPosition] = React.useState(false);\n  const [grid, setGrid] = React.useState([]);\n  const [blocked, setBlocked] = React.useState<Blocked>({});\n\n  // Styles\n  const columnStyle = styles.column;\n  const columnBlockedStyle = styles.columnBlocked;\n  const columnPathStyle = styles.columnPath;\n  const startStyle = styles.start;\n  const destinationStyle = styles.destination;\n\n  const getAdjacent = (vertex: number[]) => {\n    const x = vertex[0], y = vertex[1];\n    const adjacentVals = {\n      top: [x, y - 1],\n      right: [x + 1, y],\n      bottom: [x, y + 1],\n      left: [x - 1, y]\n    };\n    const arr = [];\n    if (!isBlocked(adjacentVals.top) && adjacentVals.top[1] >= 0) {\n      arr.push(adjacentVals.top);\n    }\n    if (!isBlocked(adjacentVals.right) && adjacentVals.right[0] <= size - 1) {\n      arr.push(adjacentVals.right);\n    }\n    if (!isBlocked(adjacentVals.bottom) && adjacentVals.bottom[1] <= size - 1) {\n      arr.push(adjacentVals.bottom);\n    }\n    if (!isBlocked(adjacentVals.left) && adjacentVals.left[0] >= 0) {\n        arr.push(adjacentVals.left);\n    }\n    return arr;\n  }\n\n  const breadthFirstTraversal = (vertex: number[]) => {\n    const path: number[][] = [];\n    const visited: IVisited = {} // needs to be size of vertices and initialised to false\n    const unprocessed: number[][] = []; // Queue that contains unprocesseed vertices which needs to be checked\n  \n    unprocessed.push(vertex);\n    while (unprocessed.length !== 0) {\n      let u: number[] = unprocessed.shift() || [];\n      if (u[0] === selectedDestination[0] && u[1] === selectedDestination[1]) {\n        break;\n      }\n      if (!visited[u.toString()]) {\n        path.push(u);\n        visited[u.toString()] = true;\n        unprocessed.push(...getAdjacent(u));\n      }\n    }\n    return path;\n  }\n\n  const shortestDistance = (vertex: number[]) => {\n    const path: number[] = [];\n    const visited: any = {} // needs to be size of vertices and initialised to false\n    const unprocessed: UnprocessedVertex[] = []; // Queue that contains unprocesseed vertices which needs to be checked\n  \n    unprocessed.push({\n      key: vertex,\n      path: [vertex]\n    });\n\n    while (unprocessed.length !== 0) {\n      // @ts-ignore\n      let u: UnprocessedVertex = unprocessed.shift();\n      if (u.key[0] === selectedDestination[0] && u.key[1] === selectedDestination[1]) {\n        return u.path;\n      }\n      if (!visited[u.key.toString()]) {\n        visited[u.key.toString()] = true;\n        for (let vertex of getAdjacent(u.key)) {\n          unprocessed.push({\n            key: vertex,\n            path: [...u.path, vertex]\n          });\n        }\n      }\n    }\n\n    return path;\n  }\n  \n  let isBlocked = (arr: any) => {\n    return blocked[arr];\n  }\n\n  // Returns the class based on what position we're viewing\n  let getClass = (arr: number[], result: any = []) => {\n    if (isBlocked(arr)) {\n      return columnBlockedStyle;\n    } else if (arr[0] === selectedStart[0] && arr[1] === selectedStart[1]) {\n      return startStyle;\n    } else if (arr[0] === selectedDestination[0] && arr[1] === selectedDestination[1]) {\n      return destinationStyle;\n    } else if (result[arr.toString()]) {\n      return columnPathStyle;\n    } else {\n      return columnStyle;\n    }\n  }\n\n  React.useEffect(() => {\n    let result: any = {};\n    if (selectedStart.length > 0) {\n      let tmpPath: any[] = [];\n      switch(searchOption) {\n        case SearchOptions.BREADTH_FIRST_SEARCH: tmpPath = breadthFirstTraversal(selectedStart);\n          break;\n        case SearchOptions.SHORTEST_PATH: tmpPath = shortestDistance(selectedStart);\n          break;\n        default: tmpPath = breadthFirstTraversal(selectedStart)\n      }\n\n      for(let i of tmpPath) {\n        result[i] = true\n      }\n      \n      getPathLength(Object.keys(result).length);\n    }\n\n\n    const createMatrix = () => {\n      let tmpGrid: any = [];\n      for (let i = 0; i < size; i++) {\n        tmpGrid.push([]);\n        const row = [];\n        for (let j = 0; j < size; j++) {          \n          row.push(\n            <div\n              key={`${i}-${j}`}\n              onClick={handleSetSelectedPosition([i,j])}\n              onMouseOver={handleMouseOver([i,j])}\n              className={getClass([i, j], result)}\n              style={{ height: `${100/size}vh`, width: `${100/size}vh`, margin: '0.1em'}}>\n            </div>\n          );\n        }\n        tmpGrid[i].push(<div className={styles.row}>{row}</div>);\n      }\n      return tmpGrid;\n    }\n\n    let matrix = createMatrix();\n    setGrid(matrix);\n  }, [size, selectedStart, selectedDestination, blocked]);\n\n  const handleMouseOver = (position: any) => (event: any) => {\n    if (event.metaKey) {\n      setBlocked({\n        ...blocked,\n        [position]: !blocked[position]\n      });\n      return;\n    }\n  }\n  \n  const handleSetSelectedPosition = (position: number[]) => (event: React.MouseEvent) => {\n    if (!isBlocked(position)) {\n      if (isCurrentPosition) {\n        setSelectedStart(position);\n        setIsCurrentPosition(false);\n      } else {\n        setSelectedDestination(position);\n        setIsCurrentPosition(true);\n      }\n    }\n  };\n\n  return (\n    <div className={styles.grid}>\n      { grid }\n    </div>\n  );\n}\n\nexport default Grid;","import React from \"react\";\nimport Grid from \"../../presentational/Grid/Grid\";\nimport styles from \"./HomePage.module.css\";\n\nexport enum SearchOptions {\n  BREADTH_FIRST_SEARCH = \"Breath First Search\",\n  SHORTEST_PATH = \"Shortest Path\"\n};\n\n\nconst HomePage: React.FunctionComponent = () => {\n  const [searchOption, setSearchOption] = React.useState(SearchOptions.BREADTH_FIRST_SEARCH);\n  const [size, setSize] = React.useState(20);\n  const [pathLength, setPathLength] = React.useState(0);\n\n  const getPathLength = (length: number) => {\n    setPathLength(length);\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<any>) => {\n    setSearchOption(event.target.value);\n  }\n  const handleSetSize = (event: React.ChangeEvent<any>) => {\n    if (event.target.value >= 0 && event.target.value <= 40) {\n      setSize(event.target.value);\n    }\n  }\n\n  React.useEffect(() => {\n\n  }, [pathLength]);\n\n  return (\n    <div className={styles.homePageLockup}>\n      <div className={styles.infoLockup}>\n        <p>Search Option: <strong>{searchOption}</strong></p>\n        <div className={styles.searchOptions}>\n          <input \n            id=\"breathFirstSearch\"\n            type=\"radio\"\n            name=\"searchOption\"\n            checked={searchOption === SearchOptions.BREADTH_FIRST_SEARCH}\n            value={SearchOptions.BREADTH_FIRST_SEARCH}\n            onClick={handleInputChange}\n            />\n          <label htmlFor=\"breathFirstSearch\">{SearchOptions.BREADTH_FIRST_SEARCH}</label>\n        </div>\n        <div className={styles.searchOptions}>\n          <input \n            id=\"shortestPath\"\n            type=\"radio\"\n            name=\"searchOption\"\n            checked={searchOption === SearchOptions.SHORTEST_PATH}\n            value={SearchOptions.SHORTEST_PATH}\n            onClick={handleInputChange} \n            />\n          <label htmlFor=\"shortestPath\">{SearchOptions.SHORTEST_PATH}</label>\n        </div>\n\n        <div className={styles.gridSize}>\n          <label htmlFor=\"gridSize\">Grid Size</label>\n          <input \n            id=\"gridSize\"\n            type=\"number\"\n            name=\"gridSize\"\n            value={size}\n            onChange={handleSetSize} \n            />\n            <p>\n              Min: 0\n              <br />\n              Max: 40\n            </p>\n        </div>\n\n        {/* <p>Grid Size: <strong>{size}</strong></p> */}\n\n        <p>Path Length: <strong>{pathLength}</strong></p>\n        <div>\n          <p><strong>Click</strong> to set a marker, this will be either be the starting position or destination position to search for</p>\n          <p><strong>Hold 'Control/Command'</strong> whilst moving your mouse to create a 'blocking' block. Searches will not be able to navigate to a 'blocking' block</p>\n        </div>\n      </div>    \n      <Grid size={size} searchOption={searchOption} getPathLength={getPathLength} />\n    </div>\n  );\n}\n\nexport default HomePage;","import React from 'react';\nimport HomePage from './components/pages/HomePage/HomePage';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}